General Overview ---------------------------- 
This is a collaboration-based game that has two players, a blue and red player. Both players can move left, right, and up (to jump). The blue player uses arrow keys while the red player uses a, w, and d keys. This fulfills the keyboard interactivity requirement. The red player can step on the lava but the blue cannot; the blue player can step on the water while the red cannot. The goal of the game is to reach the door safely for all levels and collect as many coins as you can (the GUI has a score and time tracker). When you first run the game, the game start screen will appear (another part of the GUI). While traversing the map, if the players fall into the lava/water or fail to reach the door within the allocated time, you lose the game (lose screen will appear). As you're playing the game there will also be background elements such as the bird with stars moving randomly across the map. This fulfills the 2-level animation hierarchy requirement. If you are able to successfully overcome the obstacles and reach the door for all the levels, you win the game (win screen will appear). When you lose (by falling into the wrong puddle or running out of time) or win the game (by finishing all the levels), a prompt for entering your name will appear. When you enter your name and submit, this will lead you to the leaderboard with all the highscores. If you earn a score that is within the top 5, your name will appear on the leaderboard. This fulfills the data input/output requirement. We also added the leveling system which also fulfills the data input/output requirement. At anytime, you can pause or mute the game by clicking the pause or mute buttons. The timer, characters, and objects will stop moving if click the pause button and the sound will turn off if you click the mute button.


Classes ---------------------------- 
-Bird class: Creates an instance of a bird with animation hierarchy movement. The bird has translation movement and there are also PShape stars that rotate around the translating bird. Birds are meant to serve as a part of the background of the game to make the game design more dynamic. We created 2 instances of the bird at different locations on the map in the main code.

- Button class: Creates instances of buttons such as the Continue, Quit, Try Again, and Pause buttons. Buttons are created and serve as component classes in the map class. They are later used in the map display() method and conditionally appear based on which screen is supposed to show (win screem/lose screem/pause screen/normal screen).

- Coin class: Creates instances of coins that have fields such as coin_frame (array of PImages to contain the frames for coin animation), coin_rect (a PShape needed to test collisions with the coin), and collected (a boolean used for determining if the coin has been collected yet). Coins have a position on the map and are spinning until a player comes across the coins to collect it.

- Map class: Creates an instance of a map that sets up the frame of the game and contains fields pertaining to map characteristics, component classes, and map state. The main method in this class is the display() method. This method calls the other methods (win(), lose(), restart(), and pause()) depending on the what is happening in the game. For example, if the player picks up a coin, the map will render the appropriate changes and the coin will "disappear." The display() method also displays different screens including the pause, win, and lose screens. Once the player makes it to the door, you reach the next level. If you finish all the levels (there are 7), you are shown the win screen. The Map class also includes code on setting up the leaderboard for the game. This allows players to type their name after losing in a game or winning the entire game. The high score is the coins collected throughout the game. On the board, the highest 5 scores appear after the player loses a round or wins the game. The player would first write their name out and then press submit to view the leaderboard to see if they are the top 5 scores. The Map class also contains code on the leveling system, so that when both players complete a level the game automatically progresses to the next level while keeping the correct score and previous map settings. The levels are taken from a text file with that level's name, ending when the last level has been completed and moving on to the leaderboard screen.

- Platform class: Creates an instance of a platform that serves as an obstacle in the game. The platform is paired with 2 pushers so that when the player steps on the pusher, the associated platform will move down to allow the player to step on it. The Platform class has 3 main methods, display(), update(), and move(), which is similar to the Player class. These methods dictate movement, collisions, and rendering the platform on the screen.

- Player class: Creates instances of players such as the blue and red player. This class has fields such as player images (for animation), player characteristics, and player movement and movement state. The three main methods are display(), update(), and move(). The display() method takes in a boolean parameter that determines the player's current frame. If the boolean is true, the player will change frames; if not, the player will remain the same. This boolean is supplied by the players' respective timers. The display() method also conditionally displays the appropriate player image based on whether it is running/standing and flipped/not flipped. The update() method sets the soon-to-be movement of the player and updates the run and flip booleans which will be used in display(). The move() method calls the collison test methods at the bottom to test for or not there is a collision with coins, the ground, the puddles, platform, pushers, or the door. If there is a collision, the appropriate movement will be applied to the player's movement fields.

- Pusher class: Creates an instance of a pusher that serves as an obstacle in the game. The pusher is paired with a platform so that when the player steps on the pusher, the associated platform will move down to allow the player to step on it.

- Timer class: Creates instances of timers which dictate countdown time, game state (paused and resumed), and player animation. The timer class has a method change_frame() that returns a boolean (true if the interval specified is up; false if it isn't). This method use millis(), timeElapsed, and interval to determine when the "frame" should change.


Unexpected challenges/Comments ----------------------------
Some of the challenges we faced is figuring out how to piece our code together. This game required a lot of intense collaboration, since there were so many moving parts and all the classes were connected to each other. This is definitely different from previous assignments where we simply created our respective classes and combined all our code at the very end. We were also planning to implement enemies and controller functionality, but the base map took a lot of time to implement, so we couldn't do what we initially planned. However, we were able to implement physics, a coin-collection feature, a countdown timer, animation, obstacles, continue/pause/mute/try again/quit buttons and associated screens for the GUI, a game start screen, animation hierarchy, leveling system, leaderboard, a sound system, and two-player functionality to make the game more challenging and exciting.


Main Responsibilities ----------------------------
- Anna: Helped create the backbone of the game with the physics implementation, map layout, coin collection, advanced obstacles, sound, game start screen, and player movements.
- Sanya: Helped develop the timer class and countdown clock. This was implemented in the pause screen, win screen, and lose screens, and throughout the game (to change character frames). Also helped to create the leadership board that will make use of data inputs and outputs.
- Laren: Worked on the leveling system and created multiple maps that will conditionally generate and also put individual contributions together.
- Daniel: Helped develop the door the player has to reach in order to win the game. Also helped with the implementation of the win screen and the animation hierarchy for the Bird class.


Sources ----------------------------
- Blue/red player images: https://www.deviantart.com/kingike75/art/Among-us-sprite-sheet-by-KingIke75-854090620
- Coin image: https://dlpng.com/png/4779603
- Door image: https://www.pinterest.com/pin/283163895305825926/
- Ground, lever, platform, and pusher images: Pixel art created by Anna
- Leaderboard parsing code: We referenced this link to help us with this implementation - https://processing.org/reference/createReader_.html
- Start game image: https://mokazar.artstation.com/projects/mD52d9
- Sounds: https://www.zapsplat.com/